def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
// START: FlutterFire Configuration
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
// END: FlutterFire Configuration
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

// flavor による参照先の変更
// gradle 単体で実行するときに落ちないよう空文字列で初期化
def dartEnvironmentVariables = [
        FLAVOR                    : '',
        ANDROID_GOOGLE_MAP_API_KEY: '',
]
if (project.hasProperty('dart-defines')) {
    // カンマ区切りかつBase64でエンコードされている dart-defines をデコードして変数に格納します。
    dartEnvironmentVariables = dartEnvironmentVariables + project.property('dart-defines')
            .split(',')
            .collectEntries { entry ->
                def pair = new String(entry.decodeBase64(), 'UTF-8').split('=')
                [(pair.first()): pair.last()]
            }
}

// google-services.json を選択するためのタスク
task selectGoogleServicesJson(type: Copy) {
    from "src/${dartEnvironmentVariables.FLAVOR}/google-services.json"
    into './'
}

tasks.whenTaskAdded { task ->
    if (task.name == 'processDebugGoogleServices' || task.name == 'processReleaseGoogleServices') {
        task.dependsOn selectGoogleServicesJson
    }
}

// key.propertiesを読み込む
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    // https://firebase.google.com/docs/android/setup?hl=ja#register-app => 31
    // 2022/10現在、最新のバージョン（Android13）
    compileSdkVersion 34
    ndkVersion "25.2.9519653"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-build-configuration.
        // ref. https://firebase.google.com/docs/android/setup?hl=ja#register-app => minSdkVersion: 19
        // ref. https://pub.dev/packages/google_maps_flutter => minSdkVersion: 20
        // ref. https://twitter.com/_mono/status/1509452309398695936
        // GoogleFit が Android5以降（sdkVersion = 21）対応なので、HealthConnect が sdkVersion = 28 対応なので
        minSdkVersion 28
        // 2022/10現在、最新のバージョン（Android13）
        targetSdkVersion 34
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        // 環境ごとにパッケージ名を修正
        if (dartEnvironmentVariables.FLAVOR != '') {
            if (dartEnvironmentVariables.FLAVOR == 'sub') {
                // subはストアにリリースされた後は削除される想定
                applicationIdSuffix ".prod.sub"
            } else {
                applicationIdSuffix ".${dartEnvironmentVariables.FLAVOR}"
            }
        }
        // firebase関連のライブラリを使うことによる64k問題の回避のための設定
        multiDexEnabled true

        manifestPlaceholders += [
                // Google Map API の鍵情報を読み込むための設定
                GOOGLE_MAP_API_KEY: dartEnvironmentVariables.ANDROID_GOOGLE_MAP_API_KEY,
        ]
    }

    // ref. https://docs.codemagic.io/flutter-code-signing/android-code-signing/
    signingConfigs {
        release {
            if (System.getenv()["CI"]) {
                storeFile file(System.getenv()["CM_KEYSTORE_PATH"])
                storePassword System.getenv()["CM_KEYSTORE_PASSWORD"]
                keyAlias System.getenv()["CM_KEY_ALIAS"]
                keyPassword System.getenv()["CM_KEY_PASSWORD"]
            } else {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
                storePassword keystoreProperties['storePassword']
            }
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            ndk {
                debugSymbolLevel 'SYMBOL_TABLE'
            }
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // firebase settings
    implementation platform('com.google.firebase:firebase-bom:30.3.2')
    implementation 'com.google.firebase:firebase-analytics'
}
